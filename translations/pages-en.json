{
  "AUTH-001": {
    "name": "Login",
    "purpose": "Secure user authentication gateway for accessing the A-SW Hub platform with role-based credentials and session management.",
    "description": "The login page provides a secure authentication interface for all A-SW Hub users with a distinctive split-screen industrial design. The left side features a clean white form area with email/password authentication, while the right side displays a black pitch area showcasing the platform's key features. The page supports email-based login, password authentication, GitHub OAuth integration, and includes session persistence through the 'Remember me' option. Real-time platform statistics (142 projects, 47 active builds, 12 users online) are displayed at the bottom. The design follows the extreme Black & White industrial aesthetic with ASCII iconography and zero border-radius throughout.",
    "components": [
      "Email input field with HTML5 validation and autocomplete",
      "Password input field with visibility toggle and autocomplete",
      "Remember me checkbox for session persistence",
      "Primary authentication button with loading state",
      "GitHub OAuth integration button with ASCII icon",
      "Platform statistics footer (projects, builds, online users)",
      "Split-screen layout: white form area (left) + black pitch area (right)",
      "A-SW HUB logo with geometric block icon",
      "Forgot password link with underline styling",
      "Security badges display (ISO 27001, GDPR, SOC 2)",
      "Feature showcase cards (Crop Optimization, Supply Chain, Data Analytics, Compliance)",
      "Real-time error message display with monochrome styling"
    ],
    "features": [
      "Secure credential validation with authStore integration",
      "Session token generation and management",
      "Role-based access control (Admin, Developer, Viewer)",
      "GitHub OAuth authentication support",
      "Session persistence with localStorage integration",
      "Real-time authentication status feedback with loading states",
      "Responsive design with mobile optimization (pitch area hidden on mobile)",
      "Industrial B/W design system with consistent typography",
      "Comprehensive form validation and error handling",
      "Automatic navigation to dashboard on successful login"
    ]
  },
  "DASH-001": {
    "name": "Dashboard",
    "purpose": "Centralized overview of all projects, builds, issues, and team activities across the A-SW Hub platform with real-time statistics and interactive visualizations.",
    "description": "The dashboard serves as the main landing page after successful authentication, providing a comprehensive overview of platform activities. It displays four key statistics cards at the top (Total Projects: 142, Builds Today with dynamic counts, Success Rate percentage, Active Users: 47), followed by two Chart.js visualizations arranged in a 2-column grid. The first chart shows build trends over the last 7 days with both successful and failed builds tracked, while the second displays a doughnut chart of programming language distribution (TypeScript: 35%, Python: 25%, Java: 20%, Go: 15%, Other: 5%). Below the charts, a real-time activity feed shows the 5 most recent platform activities including build starts, deployment completions, approval requests, build failures, and project updates, each with status-specific indicators.",
    "components": [
      "Four statistics cards with trend indicators (up/down/neutral arrows)",
      "Line chart displaying build trends (successful vs failed) over 7 days using Chart.js",
      "Doughnut chart showing language distribution across projects",
      "Real-time activity feed with 5 recent activities",
      "Activity status indicators (running: pulsing animation, success: solid, pending: hollow, failed: subtle)",
      "Panel component wrapper with title and optional actions slot",
      "View All button for accessing complete activity history",
      "Stat component with label, value, trend direction, and trend description",
      "Monochrome chart styling (black lines, fills, and labels)",
      "Responsive grid layout (charts stack on mobile <1024px)"
    ],
    "features": [
      "Real-time data updates from buildsStore and projectsStore",
      "Role-based content filtering based on user permissions",
      "Interactive Chart.js visualizations with monochrome styling",
      "Build metrics calculation (total, running, failed, success rate)",
      "Activity feed with status-based color coding and icons",
      "Automatic chart cleanup on component destruction",
      "Dynamic statistics based on actual build data",
      "Responsive design with grid collapsing on smaller screens",
      "Hover interactions on charts for detailed data points",
      "Background pulse animation for running builds in activity feed"
    ]
  },
  "PROJ-001": {
    "name": "Projects List",
    "purpose": "Comprehensive directory of all agricultural software projects with advanced filtering, search capabilities, and grid-based visualization for easy project discovery and navigation.",
    "description": "The projects list page displays all autonomous software projects in a structured grid layout with industrial design aesthetics. The page header includes the title 'AGRICULTURAL SOFTWARE PROJECTS' and a prominent 'NEW PROJECT' button. A comprehensive filters bar provides search functionality with autocomplete, category dropdown (11 categories including crop-management, soil-analysis, irrigation, etc.), status filter (active, maintenance, archived, deprecated), and programming language filter. The main content area uses a responsive grid (auto-fill, 400px minimum) to display project cards, each showing project status with ASCII indicators (■ for active, ▣ for maintenance, □ for archived, ▢ for deprecated), programming language in monospace font, project name, description (truncated to 2 lines), category badge, and footer statistics (stars, forks, contributors). Each card is clickable and navigates to the project detail page.",
    "components": [
      "Page header with title and 'NEW PROJECT' button",
      "Filters bar with search input (300px width with auto-complete)",
      "Category dropdown filter with 12 options (all + 11 project categories)",
      "Status dropdown filter (all, active, maintenance, archived, deprecated)",
      "Programming language dropdown filter (all + 10 languages)",
      "Filter results counter showing number of projects",
      "Responsive projects grid (auto-fill, minmax(400px, 1fr))",
      "Project card with header, body, and footer sections",
      "Status indicator with ASCII symbols based on project state",
      "Language badge in monospace font (JetBrains Mono/Fira Code)",
      "Project name heading with semibold weight",
      "Description text with 2-line ellipsis overflow",
      "Category badge with inverted colors (white text on black background)",
      "Statistics row showing stars, forks, and contributors count",
      "Last commit date with formatted display",
      "Build status badge (success or failed) with conditional styling",
      "Empty state message when no projects match filters"
    ],
    "features": [
      "Real-time project status updates via projectsStore",
      "Multi-criteria filtering and search with reactive updates",
      "Search query binding with input event handling",
      "Category, status, and language filter combinations",
      "Filtered projects count from filteredProjects store",
      "Click navigation to project detail page (/projects/{slug})",
      "ASCII status indicators based on project state",
      "Responsive grid with border-based layout (no gaps)",
      "Hover state with subtle background color change",
      "Project card height fixed at 280px for consistency",
      "Build status conditional rendering and styling",
      "Date formatting for last commit information",
      "Empty state UI when filteredProjects is empty",
      "Border-based grid system (cards have right and bottom borders only)",
      "Category name formatting (replaces hyphens with spaces, uppercase)"
    ]
  },
  "PROJ-002": {
    "name": "Project Detail",
    "purpose": "Comprehensive project management hub with tabbed interface providing complete visibility into project overview, builds, deployments, team members, and configuration settings.",
    "description": "The project detail page serves as the central hub for all project-related activities with a sophisticated tabbed interface. The page includes a project header displaying name, status badge, and key metrics, followed by a six-tab navigation system (Overview, Builds, Statistics, Deployments, Contributors, Settings). Each tab provides specialized functionality with detailed information and interactive controls. The page uses reactive Svelte stores for real-time data synchronization and implements role-based access control to show/hide tabs based on user permissions.",
    "components": [
      "Project header with name, status badge (■/▣/□), and action buttons",
      "Six-tab navigation bar with active state indicators",
      "Tab content area with conditional rendering based on activeTab",
      "Project metrics badges (stars, forks, issues, commits)",
      "Real-time status indicators",
      "Action button group in header (Edit, Settings, Pipeline)",
      "Responsive layout with mobile optimization"
    ],
    "features": [
      "Six specialized tabs for different project aspects",
      "Real-time data synchronization via Svelte stores",
      "Role-based tab visibility and access control",
      "Tab navigation with active state management",
      "Responsive design with mobile tab stacking",
      "Keyboard navigation support",
      "Deep linking to specific tabs via URL hash"
    ],
    "tabs": {
      "Overview": {
        "description": "The Overview tab displays comprehensive project information including quick action buttons, project metadata cards, repository details, metrics dashboard, and recent commit history. The layout uses a 3-column info grid showing Project Information (category, language, visibility, license, created date), Repository details (URL, default branch, branch count, last commit), and Metrics (stars, forks, contributors, coverage percentage). Below the info grid, a description section shows the full project description, followed by a recent commits list with commit messages, authors, timestamps, and SHA hashes.",
        "components": [
          "Quick actions bar with 4 buttons (CLONE, STAR, FORK, DEPLOY)",
          "3-column info grid (Project Information, Repository, Metrics)",
          "Project Information card with 5 rows (Category, Language, Visibility, License, Created)",
          "Repository card with 4 rows (URL in monospace, Default Branch, Branches count, Last Commit)",
          "Metrics card with 2x2 grid (Stars, Forks, Contributors, Coverage %)",
          "Description section with project description text",
          "Recent Commits section with commits list",
          "Commit cards showing message, author, time ago, SHA (7 chars monospace)",
          "Clone URL copy functionality",
          "Star toggle button with active state",
          "Fork button with fork count",
          "Quick Deploy button (primary styling)"
        ],
        "features": [
          "One-click clone URL copy to clipboard",
          "Star/unstar project with real-time count update",
          "Fork project functionality",
          "Quick deploy to default environment",
          "Category name formatting (hyphens to spaces, uppercase)",
          "Date formatting for created and last commit dates",
          "Coverage percentage display with conditional styling",
          "Monospace font for technical values (URLs, branches, SHAs)",
          "Recent commits with time ago formatting",
          "Commit SHA truncation to 7 characters",
          "Responsive grid layout (stacks to 1 column on mobile)"
        ]
      },
      "Builds": {
        "description": "The Builds tab presents a comprehensive view of all build executions for the project in a tabular format. The table shows build number, status with ASCII indicators (✓ success, ✕ failed, ⟳ running, ○ pending), branch name, commit SHA (7 characters), trigger type (push/PR/manual/schedule), duration formatted in minutes and seconds, completion timestamp, and action buttons for viewing logs or retrying failed builds. Running builds display with animated indicators and real-time progress updates.",
        "components": [
          "Builds table with 8 columns (Build #, Status, Branch, Commit, Trigger, Duration, Finished, Actions)",
          "Table header with inverted colors (white on black)",
          "Build number column with #prefix",
          "Status column with ASCII icons and text (SUCCESS/FAILED/RUNNING/PENDING)",
          "Branch name in monospace font",
          "Commit SHA truncated to 7 characters in monospace",
          "Trigger badge (PUSH/PR/MANUAL/SCHEDULE)",
          "Duration formatted as Xm Ys",
          "Timestamp formatted as relative time or full date",
          "Actions column with View Logs and Retry buttons",
          "Running builds with spinner animation (⟳)",
          "Empty state message when no builds exist"
        ],
        "features": [
          "Real-time build status updates via buildsStore",
          "Build table with sortable columns",
          "ASCII status indicators (✓, ✕, ⟳, ○)",
          "Clickable build rows navigating to build detail",
          "View Logs button opening log viewer modal",
          "Retry button for failed builds (triggers new build)",
          "Build trigger type identification",
          "Duration calculation and formatting",
          "Relative timestamp formatting (5m ago, 2h ago, 3d ago)",
          "Branch name with monospace styling",
          "Commit SHA linking to repository",
          "Running build animation with pulsing indicator",
          "Build count display in tab badge",
          "Empty state handling for new projects"
        ]
      },
      "Deployments": {
        "description": "The Deployments tab tracks deployment history and current deployment status across all environments. It displays a table of deployments showing deployment ID, environment (Production/Staging/Development), version number, status with indicators, deployer name, deployment timestamp, and action buttons for viewing details or initiating rollback. Active deployments show real-time progress through deployment stages with visual indicators.",
        "components": [
          "Deployments table with 7 columns (Deployment #, Environment, Version, Status, Deployer, Deployed, Actions)",
          "Environment badges (PRODUCTION: filled black, STAGING: dashed border, DEVELOPMENT: gray)",
          "Version numbers in semibold font",
          "Status indicators (● DEPLOYED, ⟳ DEPLOYING, ✕ FAILED, ↶ ROLLED BACK)",
          "Deployer name with user icon",
          "Deployment timestamp with relative formatting",
          "Actions buttons (View Details, Rollback)",
          "Active deployment progress bar with stages",
          "Deployment stage indicators (Build, Tests, Deploy, Verify)",
          "Rollback confirmation dialog"
        ],
        "features": [
          "Real-time deployment status tracking",
          "Multi-environment deployment visibility",
          "Environment-specific badge styling",
          "Version number display and tracking",
          "Deployer information with user details",
          "Deployment timestamp formatting",
          "View deployment details with full logs",
          "One-click rollback for failed deployments",
          "Rollback confirmation with reason input",
          "Active deployment progress visualization",
          "Stage-by-stage deployment tracking",
          "Deployment history with filtering",
          "Environment status color coding"
        ]
      },
      "Contributors": {
        "description": "The Contributors tab displays all team members and contributors associated with the project in a grid layout. Each contributor card shows their name (or username), role badge (Owner/Maintainer/Developer/Viewer), avatar (or initials if no avatar), contribution statistics (commits, PRs, issues), and last active timestamp. The grid uses a responsive auto-fill layout with minimum 250px card width.",
        "components": [
          "Contributors grid (auto-fill, minmax(250px, 1fr))",
          "Contributor cards with avatar, name, role, stats",
          "Avatar display (image or initials fallback)",
          "Initials generation from name (first letters)",
          "Role badge with color coding (Owner: black, Maintainer: dark gray, Developer: gray, Viewer: light gray)",
          "Contribution stats grid (2x2): Commits, PRs, Issues, Reviews",
          "Last active timestamp with relative formatting",
          "Contributor count badge in tab",
          "Empty state for projects without contributors"
        ],
        "features": [
          "Team member listing with roles",
          "Avatar display with initials fallback",
          "Automatic initials generation",
          "Role-based badge styling",
          "Contribution statistics tracking",
          "Commit count per contributor",
          "Pull request count",
          "Issue activity tracking",
          "Code review participation count",
          "Last active time tracking",
          "Relative time formatting (2h ago, 3d ago)",
          "Responsive grid layout",
          "Contributor count in tab badge",
          "Empty state for new projects"
        ]
      },
      "Settings": {
        "description": "The Settings tab provides quick access to essential project configuration options directly within the project detail page. It displays a summary of current settings with direct links to full configuration pages. The tab shows repository settings (URL, branch protection status), build settings (CI/CD enabled status, quality gates), deployment settings (auto-deploy toggles per environment), and notification settings (enabled channels). Each settings section includes a 'Configure' button navigating to the detailed configuration page.",
        "components": [
          "Settings summary grid (2 columns)",
          "Repository Settings card (URL, default branch, protection status)",
          "Build Settings card (CI/CD enabled, quality gates status, triggers)",
          "Deployment Settings card (auto-deploy toggles for environments)",
          "Notification Settings card (enabled channels list)",
          "Configure buttons for each settings section",
          "Status indicators (● ENABLED, ○ DISABLED)",
          "Quick toggle switches for binary settings",
          "External link icons for full configuration pages"
        ],
        "features": [
          "Settings summary overview",
          "Quick navigation to full configuration",
          "Repository settings display",
          "Branch protection status",
          "CI/CD enablement status",
          "Quality gates summary",
          "Build triggers list",
          "Auto-deploy status per environment",
          "Notification channels overview",
          "Quick toggle for common settings",
          "Configure button navigation",
          "Status indicator styling",
          "Responsive 2-column grid (stacks on mobile)"
        ]
      }
    }
  },
  "PROJ-003": {
    "name": "Project Configuration",
    "purpose": "Advanced project settings interface providing comprehensive configuration for general settings, repository connections, build pipelines, deployment strategies, notifications, and security policies.",
    "description": "The project configuration page allows administrators and project owners to manage all aspects of project settings through a seven-section sidebar navigation. Each section contains detailed forms and controls for specific configuration areas. The interface implements form validation, dirty state tracking, and confirmation dialogs for destructive operations.",
    "components": [
      "Sidebar navigation (250px fixed width) with 7 sections",
      "Active section indicator with left border",
      "Form content area with section-specific forms",
      "Save Changes button (sticky at bottom)",
      "Unsaved changes indicator",
      "Confirmation dialogs for destructive actions"
    ],
    "features": [
      "Seven-section configuration management",
      "Form validation with real-time feedback",
      "Dirty state tracking",
      "Unsaved changes warning",
      "Confirmation dialogs for dangerous operations",
      "Responsive design with collapsible sidebar on mobile"
    ],
    "tabs": {
      "General": {
        "description": "The General settings section manages core project metadata including project name, slug (URL-safe identifier), description, category selection, visibility (public/private/internal), license type, default branch, and repository URL. The form includes validation for required fields, unique slug checking, and automatic slug generation from project name.",
        "components": [
          "Project name input with validation (required, 3-50 characters)",
          "Slug input with auto-generation and uniqueness check",
          "Description textarea (max 500 characters)",
          "Category dropdown (11 options)",
          "Visibility dropdown (Public/Private/Internal)",
          "License dropdown (MIT, Apache 2.0, GPL v3, BSD, Proprietary, None)",
          "Default branch input",
          "Repository URL input (read-only if connected)",
          "Character counter for description",
          "Validation error messages",
          "Save button with dirty state indicator"
        ],
        "features": [
          "Project name editing with validation",
          "Automatic slug generation from name",
          "Slug uniqueness validation via API",
          "Description character counter",
          "Category selection from predefined list",
          "Visibility control (public/private/internal)",
          "License type selection",
          "Default branch configuration",
          "Repository URL display (read-only)",
          "Form validation with inline errors",
          "Real-time field validation",
          "Unsaved changes tracking"
        ]
      },
      "Repository": {
        "description": "The Repository section configures Git repository connections, webhook settings, branch protection rules, and commit signing requirements. It displays connection status, allows testing the repository connection, manages webhook creation/deletion, and configures branch protection rules including required reviews, status checks, and restriction policies.",
        "components": [
          "Repository connection status indicator (● CONNECTED / ○ DISCONNECTED)",
          "Repository URL display with Test Connection button",
          "Webhook management section",
          "Webhook URL display (generated)",
          "Webhook secret display (masked, copy button)",
          "Regenerate Webhook button",
          "Branch protection rules section",
          "Protected branches list (tags with remove button)",
          "Add Branch input with Add button",
          "Required reviews count input (0-6)",
          "Require status checks before merge checkbox",
          "Required status checks list (add/remove)",
          "Require signed commits checkbox",
          "Include administrators checkbox"
        ],
        "features": [
          "Repository connection status display",
          "Connection testing functionality",
          "Webhook automatic creation",
          "Webhook URL generation",
          "Webhook secret management",
          "Webhook regeneration",
          "Branch protection configuration",
          "Protected branches management",
          "Required reviews count setting",
          "Status checks requirement",
          "Required status checks list",
          "Signed commits enforcement",
          "Administrator bypass control",
          "Webhook secret copy to clipboard"
        ]
      },
      "Build": {
        "description": "The Build section configures CI/CD pipeline settings including build triggers (on push, on PR, scheduled, manual), environment variables, build scripts, quality gates with thresholds, and artifact retention policies. It includes a script editor for build commands and comprehensive quality gate configuration for code coverage, test pass rate, security scans, and complexity thresholds.",
        "components": [
          "Build triggers checkbox group (4 options: Push, PR, Schedule, Manual)",
          "Schedule input (cron syntax) with validation",
          "Environment variables key-value editor",
          "Add Variable button",
          "Variable cards (name, value masked, visibility toggle, delete button)",
          "Build script textarea with line numbers",
          "Script language dropdown (Bash, Python, Node.js, Go)",
          "Quality gates section",
          "Code coverage threshold input (0-100%)",
          "Test pass rate threshold input (0-100%)",
          "Security scan required checkbox",
          "Max complexity threshold input",
          "Artifact retention section",
          "Retention period input (days)",
          "Artifact size limit input (MB)"
        ],
        "features": [
          "Build trigger configuration",
          "Scheduled builds with cron syntax",
          "Cron validation and parsing",
          "Environment variables management",
          "Variable value masking",
          "Variable visibility control (secret/visible)",
          "Build script editing",
          "Multi-language script support",
          "Quality gate thresholds",
          "Code coverage requirement",
          "Test pass rate requirement",
          "Security scan enforcement",
          "Complexity threshold setting",
          "Artifact retention policy",
          "Retention period configuration",
          "Artifact size limits"
        ]
      },
      "Deployment": {
        "description": "The Deployment section manages deployment environments, strategies, and policies. It allows adding/removing environments, configuring deployment strategies (rolling, blue-green, canary), setting auto-deploy rules, configuring rollback policies, and managing deployment windows. Each environment can have specific settings for deployment strategy, health checks, and rollback triggers.",
        "components": [
          "Environments list (cards)",
          "Add Environment button",
          "Environment cards (name, URL, status, Configure button)",
          "Environment configuration modal",
          "Environment name input",
          "Environment URL input",
          "Deployment strategy dropdown (Rolling, Blue-Green, Canary)",
          "Auto-deploy toggle",
          "Auto-deploy branches input (comma-separated)",
          "Health check URL input",
          "Health check interval input (seconds)",
          "Rollback policy dropdown (Manual, Auto on Failure, Auto on Health Check)",
          "Rollback trigger threshold input",
          "Deployment window section",
          "Allowed deployment times (day/time selection)",
          "Maintenance window scheduling"
        ],
        "features": [
          "Multiple environment management",
          "Environment CRUD operations",
          "Deployment strategy selection",
          "Auto-deploy configuration",
          "Branch-based auto-deploy",
          "Health check configuration",
          "Health check interval setting",
          "Rollback policy selection",
          "Automatic rollback triggers",
          "Rollback threshold configuration",
          "Deployment window scheduling",
          "Maintenance window management",
          "Environment-specific settings",
          "Deployment strategy validation"
        ]
      },
      "Notifications": {
        "description": "The Notifications section configures notification channels and event subscriptions. It allows enabling/disabling notification channels (Email, Slack, Webhooks), setting up channel-specific configuration (email addresses, Slack webhook URLs, custom webhook endpoints), and selecting which events trigger notifications (build events, deployment events, approval events, issue events, PR events). Each event type can be configured independently per channel.",
        "components": [
          "Notification channels list",
          "Email notifications section",
          "Email enabled toggle",
          "Recipient emails textarea (one per line)",
          "Slack notifications section",
          "Slack enabled toggle",
          "Slack webhook URL input",
          "Slack channel input",
          "Custom webhooks section",
          "Webhook enabled toggle",
          "Webhook URL input",
          "Webhook events checkboxes",
          "Event subscription section",
          "Event categories (Build, Deploy, Approval, Issue, PR)",
          "Event-specific checkboxes per channel",
          "Test notification button per channel"
        ],
        "features": [
          "Multi-channel notifications",
          "Email notifications configuration",
          "Multiple recipient support",
          "Slack integration",
          "Slack webhook configuration",
          "Channel-specific routing",
          "Custom webhook integration",
          "Event-based notifications",
          "Granular event selection",
          "Per-channel event subscription",
          "Test notification functionality",
          "Notification delivery verification",
          "Channel enablement toggles",
          "Event filtering"
        ]
      },
      "Advanced": {
        "description": "The Advanced section provides additional configuration options including project transfer, repository mirroring, custom domain setup, API access control, webhook secrets rotation, and integration with external tools. It includes technical settings for advanced users and administrators.",
        "components": [
          "Project transfer section",
          "Transfer to user/organization dropdown",
          "Transfer button with confirmation",
          "Repository mirroring section",
          "Mirror repository URL input",
          "Mirror sync schedule dropdown",
          "Enable mirroring toggle",
          "Custom domain section",
          "Custom domain input",
          "DNS configuration instructions",
          "Verify domain button",
          "API access section",
          "API rate limit input",
          "Allowed IP addresses textarea",
          "API key scopes checkboxes",
          "Webhook secrets section",
          "Rotate all secrets button"
        ],
        "features": [
          "Project transfer to another owner",
          "Transfer confirmation workflow",
          "Repository mirroring",
          "Mirror synchronization scheduling",
          "Custom domain configuration",
          "DNS verification",
          "Domain SSL certificate",
          "API rate limiting",
          "IP whitelist for API access",
          "API key scope management",
          "Webhook secret rotation",
          "Bulk secret regeneration"
        ]
      },
      "Danger Zone": {
        "description": "The Danger Zone section contains destructive operations including project archiving, project transfer, and project deletion. Each operation requires explicit confirmation and some operations require typing a confirmation phrase. Archived projects become read-only, transfers require recipient acceptance, and deletion is permanent and irreversible.",
        "components": [
          "Danger zone container (dashed red border)",
          "Archive project section",
          "Archive description text",
          "Archive Project button",
          "Archive confirmation dialog",
          "Transfer project section",
          "Transfer to input (username/email)",
          "Transfer Project button",
          "Transfer confirmation with recipient display",
          "Delete project section",
          "Delete consequences warning list",
          "Delete Project button",
          "Delete confirmation dialog",
          "Confirmation phrase input (type project name)",
          "Final Delete button (disabled until phrase matches)"
        ],
        "features": [
          "Project archiving (makes read-only)",
          "Archive with confirmation dialog",
          "Unarchive functionality",
          "Project transfer to another user",
          "Transfer with recipient confirmation",
          "Transfer acceptance workflow",
          "Project deletion (permanent)",
          "Delete with typed confirmation",
          "Confirmation phrase validation",
          "Multi-step delete confirmation",
          "Warning about data loss",
          "List of deletion consequences",
          "Disabled state until confirmed"
        ]
      }
    }
  },
  "PROJ-004": {
    "name": "Project Pipelines",
    "purpose": "CI/CD pipeline management interface with comprehensive visualization of pipeline stages, execution history, configuration editor, and real-time monitoring of pipeline runs.",
    "description": "The project pipelines page provides complete control over continuous integration and deployment pipelines through a four-tab interface. It displays pipeline status, allows configuration editing, shows execution history with logs, and manages pipeline settings.",
    "components": [
      "Four-tab navigation (Overview, Configuration, History, Settings)",
      "Tab content area with conditional rendering",
      "Pipeline status indicators",
      "Action buttons (Run Pipeline, Edit Configuration)",
      "Real-time status updates"
    ],
    "features": [
      "Four specialized tabs for pipeline management",
      "Real-time pipeline status via WebSocket",
      "Pipeline configuration editing",
      "Execution history with logs",
      "Pipeline settings management"
    ],
    "tabs": {
      "Overview": {
        "description": "The Overview tab displays the current pipeline execution status with a visual flow diagram showing all stages, their current status, and execution duration. It includes a pipeline run summary with branch, commit SHA, trigger type, start time, and overall status. Active pipeline runs show real-time progress with animated indicators for running stages.",
        "components": [
          "Pipeline flow diagram with stage cards",
          "Stage cards showing name, status icon, duration",
          "Stage status icons (○ pending, ⟳ running, ✓ success, ✕ failed)",
          "Stage connection lines with flow arrows",
          "Pipeline run summary panel",
          "Branch and commit information",
          "Trigger type badge (Push/PR/Manual/Schedule)",
          "Start time and duration",
          "Overall status badge with color coding",
          "Run Pipeline button (primary)",
          "Cancel Pipeline button (running only)",
          "View Logs link for each stage"
        ],
        "features": [
          "Visual pipeline flow representation",
          "Real-time stage status updates",
          "Stage-by-stage progress tracking",
          "Running stage animation (spinner)",
          "Stage duration calculation",
          "Overall pipeline status",
          "Branch and commit display",
          "Trigger type identification",
          "Manual pipeline execution",
          "Cancel running pipeline",
          "Stage logs quick access",
          "Pipeline run summary"
        ]
      },
      "Configuration": {
        "description": "The Configuration tab provides a YAML editor for defining pipeline stages, jobs, scripts, and dependencies. It includes syntax highlighting, validation, and a visual preview of the pipeline structure. The editor supports defining multiple stages with parallel and sequential jobs, environment variables, artifacts, and caching configuration.",
        "components": [
          "YAML editor with syntax highlighting",
          "Line numbers and code folding",
          "Validation messages panel",
          "Save Configuration button",
          "Pipeline structure preview",
          "Stage list with job counts",
          "Visual dependency graph",
          "Example templates dropdown",
          "Load Template button",
          "Export configuration button",
          "Import configuration button",
          "Validation status indicator"
        ],
        "features": [
          "YAML-based pipeline definition",
          "Syntax highlighting for YAML",
          "Real-time validation",
          "Pipeline structure preview",
          "Dependency visualization",
          "Template library access",
          "Configuration import/export",
          "Multi-stage pipeline support",
          "Parallel job execution config",
          "Environment variables definition",
          "Artifacts configuration",
          "Caching rules setup",
          "Validation error display"
        ]
      },
      "History": {
        "description": "The History tab displays a chronological list of all pipeline executions with filtering capabilities by status, branch, date range, and triggered by user. Each execution entry shows pipeline run number, status, branch, commit SHA, duration, start time, and provides access to full logs and re-run functionality for failed pipelines.",
        "components": [
          "Filter controls bar (Status, Branch, Date Range, Triggered By)",
          "Pipeline runs table with 8 columns",
          "Run number column with #prefix",
          "Status column with badge and icon",
          "Branch name in monospace",
          "Commit SHA (7 chars) with copy button",
          "Duration formatted as Xh Ym Zs",
          "Start time with relative formatting",
          "Actions column (View Logs, Re-run)",
          "Pagination controls",
          "Results per page selector",
          "Empty state for no history"
        ],
        "features": [
          "Pipeline execution history",
          "Multi-criteria filtering",
          "Status filtering (all/success/failed/cancelled)",
          "Branch filtering with autocomplete",
          "Date range selection",
          "User-based filtering",
          "Sortable table columns",
          "Detailed logs access",
          "Failed pipeline re-run",
          "Commit SHA copy",
          "Pagination support",
          "Results per page control",
          "Empty state handling"
        ]
      },
      "Settings": {
        "description": "The Settings tab manages pipeline-wide configuration including timeout settings, retry policies, artifact retention, concurrent execution limits, notification rules, and approval requirements. It provides controls for optimizing pipeline performance and reliability.",
        "components": [
          "Pipeline timeout section",
          "Global timeout input (minutes)",
          "Stage timeout input (minutes)",
          "Job timeout input (minutes)",
          "Retry policy section",
          "Max retries input (0-3)",
          "Retry on failure types checkboxes",
          "Artifacts section",
          "Artifact retention period input (days)",
          "Max artifact size input (MB)",
          "Concurrent execution section",
          "Max concurrent pipelines input",
          "Queue behavior dropdown (Wait/Cancel Old)",
          "Notifications section",
          "Notify on success toggle",
          "Notify on failure toggle",
          "Notify users list",
          "Approval requirements section",
          "Require approval toggle",
          "Approvers list"
        ],
        "features": [
          "Global timeout configuration",
          "Stage-specific timeouts",
          "Job-level timeout control",
          "Automatic retry policies",
          "Retry attempt limits",
          "Failure type selection for retry",
          "Artifact retention management",
          "Artifact size limits",
          "Concurrent execution control",
          "Pipeline queue management",
          "Success notifications",
          "Failure notifications",
          "User notification lists",
          "Manual approval gates",
          "Approver management"
        ]
      }
    }
  },
  "PROJ-005": {
    "name": "New Project",
    "purpose": "Guided project creation wizard with four comprehensive steps to set up new agricultural software projects including basic information, repository configuration, CI/CD setup, and review.",
    "description": "The new project page guides users through creating a new project with a sophisticated 4-step wizard interface. Step 1 (Basic Information) collects project name with automatic slug generation, description textarea, category selection from 10 agricultural domains, visibility (public/private), and license choice. Step 2 (Repository Setup) offers three options: create new repository with README initialization and .gitignore template selection, connect to existing repository via URL, or import from GitHub/GitLab/Bitbucket with authentication. Step 3 (CI/CD Configuration) enables build trigger selection (on push, on PR, scheduled, manual), environment configuration (ROS2 version, Python version, Node.js version), test settings (unit tests, integration tests, security scan), and quality thresholds (minimum coverage percentage, test pass rate). Step 4 (Review & Create) displays a comprehensive summary of all configured settings organized by section with estimated resource requirements (build time, storage, monthly cost). The wizard includes step validation, progress indicator, navigation controls, and responsive design.",
    "components": [
      "Four-step wizard header with step indicators",
      "Step indicator circles (active, completed, pending states)",
      "Step connection lines with completion visualization",
      "Cancel button returning to projects list",
      "Step 1 form: name input, slug input (auto-generated), description textarea, category dropdown, visibility dropdown, license dropdown",
      "Step 2 repository options: three radio card choices (new, existing, import)",
      "New repository settings: README checkbox, gitignore template dropdown, default branch input",
      "Existing repository: URL input with validation, test connection button",
      "Import repository: platform selection (GitHub/GitLab/Bitbucket), URL input",
      "Step 3 build triggers: four checkboxes (push, PR, scheduled, manual)",
      "Environment configuration: ROS2 version, Python version dropdowns",
      "Test settings: unit tests, integration tests, security scan checkboxes",
      "Quality thresholds: coverage percentage, pass rate percentage number inputs",
      "Step 4 review sections: Basic Information summary, Repository summary, CI/CD summary",
      "Estimated resources cards: build time, storage required, monthly cost",
      "Footer navigation: Previous button, step counter, Next/Create button",
      "Step validation with disabled Next button on incomplete forms",
      "Wizard content area with fade-in animation on step change"
    ],
    "features": [
      "Guided project setup with step-by-step workflow",
      "Automatic slug generation from project name",
      "Three repository connection modes (new, existing, import)",
      "README initialization option for new repositories",
      ".gitignore template selection for multiple languages",
      "Repository URL validation and connection testing",
      "External platform import (GitHub, GitLab, Bitbucket)",
      "Comprehensive CI/CD configuration",
      "Build trigger customization (push, PR, scheduled, manual)",
      "Multi-language environment support (ROS2, Python, Node.js)",
      "Quality gate threshold configuration",
      "Test suite enablement (unit, integration, security)",
      "Review and confirmation before project creation",
      "Resource estimation (build time, storage, cost)",
      "Step validation preventing progression with incomplete data",
      "Responsive design with mobile optimization",
      "Fade-in animation for smooth step transitions",
      "Project creation with all configurations applied",
      "Automatic navigation to created project on success"
    ]
  },
  "BUILD-001": {
    "name": "Builds Dashboard",
    "purpose": "Real-time monitoring of all CI/CD build pipelines across projects with comprehensive status tracking, log visualization, and build management capabilities.",
    "description": "The builds dashboard aggregates all build activities across the platform in a sophisticated split-view interface. The left panel displays active builds with real-time progress indicators, stage-by-stage status (Build → Unit Tests → Integration Tests → Deploy → Smoke Tests → Health Check), progress bars, and expandable details showing project name, version, environment, branch, commit SHA, triggering user, and changelog. The right panel features a terminal-style log viewer with a black background and green text, displaying logs organized into collapsible sections with status-specific colors (green for success, red for errors, yellow for warnings, cyan for running). The page includes header statistics showing active builds count, success/failed counts for today, and overall success rate. A recent builds table at the bottom shows the last 10 completed builds with sortable columns, status badges, durations, and action buttons (View, Retry for failed builds).",
    "components": [
      "Page header with 'BUILD MONITOR' title and statistics (4 stat cards)",
      "Statistics: Active count, Success Today, Failed Today, Success Rate percentage",
      "Split-view layout: Active builds section (left, scrollable) + Log viewer (right, fixed 500px)",
      "Active pipelines section with pipeline cards (dashed border animation for in_progress)",
      "Pipeline card: project name, build number, branch, commit SHA (7 chars), triggered by user",
      "Progress bar with percentage and animated fill transition",
      "Stage indicators: 6 stages with status icons (✓ passed, ✕ failed, ⟳ running, ○ pending)",
      "Stage status badges with appropriate colors and icons",
      "Cancel button for running builds (stops execution)",
      "Recent builds table with 6 columns (Build, Status, Branch, Duration, Finished, Actions)",
      "Table header with inverted colors (white on black)",
      "Status badges in table rows with ASCII icons",
      "Retry button for failed builds (visible only on failure)",
      "View button navigating to detailed build page",
      "Log viewer with black terminal background (#000000)",
      "Collapsible log sections with expand/collapse controls",
      "Expand All / Collapse All buttons in log header",
      "Log sections with status-specific border colors",
      "Log lines with syntax highlighting (ERROR: red, WARNING: yellow, SUCCESS: green, INFO: cyan)",
      "Section headers with toggle icon (▼ expanded, ▶ collapsed), status icon, name, duration",
      "Running sections with pulsing spinner animation (⊙)",
      "Download logs button in header",
      "Empty state message when no active builds"
    ],
    "features": [
      "Multi-project build monitoring with centralized view",
      "Real-time build status tracking via WebSocket updates",
      "Build progress calculation across all stages",
      "Stage-by-stage execution visualization",
      "Terminal-style log viewer with monospace font",
      "Collapsible log sections for organized viewing",
      "Syntax-highlighted logs with color coding by level",
      "Build cancellation for running pipelines",
      "Failed build retry functionality",
      "Build history with last 10 completions",
      "Sortable table columns for easy navigation",
      "Duration formatting (hours, minutes, seconds)",
      "Auto-scroll during active log streaming",
      "Log filtering by level (ERROR, WARNING, INFO)",
      "Build metadata display (branch, commit, user)",
      "Success rate calculation and display",
      "Real-time progress updates every 2 seconds",
      "Completed build transition to recent table",
      "Click to select build and view logs",
      "Mobile-responsive with stacked layout on small screens"
    ]
  },
  "TIME-001": {
    "name": "Timeline",
    "purpose": "Interactive Gantt chart visualization of project timelines, milestones, and deliverables across the 5-year A-SW initiative (2025.09 - 2029.12) with comprehensive tracking of 136 deliverables for all participating institutions.",
    "description": "The timeline page provides a sophisticated Gantt chart visualization of the entire 5-year A-SW business plan using actual project data. The interface displays a phase indicator bar at the top showing Phase 1 (60%: 2025.09-2027.12 - Core Technology Development) and Phase 2 (40%: 2028.01-2029.12 - Integration & Verification). The header shows key statistics: 2 phases, 5 years, 5 institutions (KITECH, TYMICT, JBNU, VIA, OntarioTech), and 136 total deliverables. Users can switch between YEAR (showing 5 annual periods), QUARTER (showing Q3 2025 + 16 quarters), and MONTH (showing SEP-DEC 2025 + 48 months) views. The Gantt chart displays hierarchical tasks grouped by institution/phase/deliverable with expandable/collapsible groups, progress bars, milestone diamonds, and dependency lines. A 'TODAY' marker shows current progress. Task bars use different styles: parent tasks (solid black), completed (filled), in-progress (diagonal stripes), planned (hollow), delayed (dashed). A comprehensive legend explains all visual indicators. The bottom section displays institution summary cards with deliverable counts and progress percentages.",
    "components": [
      "Page header with title 'PROJECT TIMELINE' and subtitle showing date range",
      "Statistics panel: 4 stat cards (2 Phases, 5 Years, 5 Institutions, 136 Deliverables)",
      "Controls bar with 3 sections: View mode (YEAR/QUARTER/MONTH buttons), Group by (INSTITUTION/PHASE/DELIVERABLE buttons), Options (Milestones and Progress checkboxes)",
      "Export button for downloading timeline data",
      "Phase indicator bar with 2-segment display (Phase 1: black background, Phase 2: gray background)",
      "Timeline scale header with sticky positioning showing time units based on view mode",
      "Task column header (300px fixed width) with task names and hierarchy",
      "Timeline bars area with horizontal task bars and progress fills",
      "Expandable/collapsible task groups with toggle icons (▼ expanded, ▶ collapsed)",
      "Group header rows with gray background and border bottom",
      "Child task rows with indent indicators (└─) and status icons",
      "Status icons: ■ completed, ▣ in-progress, □ planned, ▲ delayed",
      "Task bars with different styles: solid (completed), striped (in-progress), hollow (planned), dashed (delayed)",
      "Progress fill overlays (30% opacity) when showProgress is enabled",
      "Milestone diamonds (◆) positioned at specific dates",
      "TODAY marker with vertical line and label",
      "Legend at bottom with 6 items explaining visual indicators",
      "Progress indicator characters: █▓▒░·",
      "Institution summary cards grid (5 cards)",
      "Summary card: institution code, type, deliverable count, progress percentage, progress bar",
      "Responsive grid for institution cards (auto-fit, minmax(200px, 1fr))"
    ],
    "features": [
      "Five-year timeline visualization (2025.09 - 2029.12)",
      "136 deliverables tracking across phases",
      "Three view modes: YEAR (5 periods), QUARTER (18 quarters), MONTH (52 months)",
      "Three grouping options: INSTITUTION, PHASE, DELIVERABLE",
      "Hierarchical task structure with expand/collapse functionality",
      "Real-time progress tracking with visual indicators",
      "Milestone visualization with date positioning",
      "Task dependency relationship visualization",
      "Gantt data integration from businessPlan module",
      "Institution filtering (KITECH, TYMICT, JBNU, VIA, OntarioTech)",
      "Task hierarchy tree view with indentation",
      "Phase-based color coding (Phase 1: black, Phase 2: gray)",
      "TODAY marker showing current project status",
      "Progress percentage calculation per institution",
      "Deliverable completion tracking",
      "Timeline position calculation based on project dates",
      "Task width calculation based on duration",
      "Expandable groups with default expansion (first 3 groups)",
      "Timeline export functionality",
      "Responsive design with horizontal scroll for timeline",
      "Sticky headers for phase and timeline scale",
      "Hover tooltips for detailed task information",
      "ASCII symbols for status and progress indicators"
    ]
  },
  "DEPLOY-001": {
    "name": "Deployments",
    "purpose": "Comprehensive deployment management dashboard showing deployment status, history, and controls across all environments (development, staging, production) with rollback capabilities and deployment window scheduling.",
    "description": "The deployments page provides complete visibility into deployment activities across the platform through a sophisticated 5-tab interface. The Environments tab (Overview) displays 4 environment cards (Production KR, Production US, Staging, Development) each showing status (healthy/degraded/down/maintenance), current version, last deployment date, scheduled next deployment, URL, region (AWS/GCP), resource usage graphs (CPU, Memory, Storage with progress bars), instance count, and key metrics (uptime %, response time ms, error rate %, throughput/min). The Active Deployments tab shows currently running deployments with real-time progress through 6 check stages (Build → Unit Tests → Integration Tests → Deploy → Smoke Tests → Health Check), displaying project name, version, environment, branch, commit, deployer, timestamp, and change log with artifact information. The Deployment History tab provides a filterable table of past deployments with status, duration, and rollback options. The Deployment Windows tab schedules deployment time slots with environment and project associations. The Rollback Management tab lists all rollback-eligible deployments from the last 30 days with version comparison and one-click rollback execution.",
    "components": [
      "Page header with title 'DEPLOYMENT MANAGEMENT' and action buttons (Deployment Window, New Deployment)",
      "Five-tab navigation (Environments, Active Deployments, History, Windows, Rollback)",
      "Tab badges showing active deployment count",
      "Environment cards grid (2 columns) with status, version, and metrics",
      "Environment status indicator (HEALTHY: filled, DEGRADED: bordered, DOWN: strikethrough, MAINTENANCE: pattern)",
      "Environment type badges (PRODUCTION: filled black, STAGING: dashed border, DEVELOPMENT: gray)",
      "Resource usage section with 3 progress bars (CPU, Memory, Storage) and percentage labels",
      "Instances count display with running status",
      "Environment metrics grid (2x2): Uptime %, Response Time ms, Error Rate %, Throughput/min",
      "Environment action buttons (Deploy, Monitoring, Menu)",
      "Active deployment cards with real-time status",
      "Deployment status badge with spinner animation for in_progress",
      "6-stage deployment checks with status icons (✓ passed, ✕ failed, ⟳ running, ○ pending)",
      "Deployment metadata (deployer, approver, start time, elapsed time)",
      "Expandable deployment details with changelog and artifacts",
      "Deployment action buttons (Pause/Resume, Rollback, Logs)",
      "History filters (Environment, Project, Status dropdowns + Export button)",
      "History table with 8 columns (Project, Version, Environment, Status, Deployer, Start Time, Duration, Actions)",
      "Table header with inverted colors",
      "Environment badges in table (PRODUCTION: filled, STAGING: dashed)",
      "Rollback button (↶ icon) for available deployments",
      "View logs button (○ icon) for all deployments",
      "Deployment window cards with schedule, environments, projects, creator, description",
      "Window status badges (SCHEDULED, ACTIVE, COMPLETED, CANCELLED)",
      "Rollback-eligible deployment cards with current→previous version comparison",
      "Execute rollback button with danger styling",
      "Rollback warning panel with precautions list (3 items)",
      "Empty state for no active deployments"
    ],
    "features": [
      "Multi-environment deployment tracking (4 environments)",
      "Real-time deployment status monitoring",
      "Resource usage visualization with progress bars",
      "Performance metrics display (uptime, response time, error rate, throughput)",
      "One-click deployment triggers per environment",
      "Six-stage deployment pipeline with progress tracking",
      "Deployment pause and resume functionality",
      "Automated rollback capabilities for failed deployments",
      "Deployment history with filtering (environment, project, status)",
      "Export deployment history to CSV/JSON",
      "Deployment window scheduling for planned releases",
      "Environment-specific deployment settings",
      "Approval workflow integration with approver tracking",
      "Changelog and artifact display for each deployment",
      "Real-time deployment log viewing",
      "Last 30 days rollback eligibility",
      "Current vs previous version comparison",
      "Deployment duration tracking and formatting",
      "Auto-refresh every 30 seconds for live updates",
      "Deployment expandable details with toggle",
      "Maintenance mode visual indicator (diagonal stripes pattern)",
      "Multi-region deployment support (ap-northeast-2, us-east-1)",
      "Environment URL display with external link",
      "Deployment check status with stage-by-stage breakdown"
    ]
  },
  "APPR-001": {
    "name": "Approvals",
    "purpose": "Centralized approval workflow management for deployment requests, merge requests, and configuration changes with comprehensive quality gate checks and priority-based queue management.",
    "description": "The approvals page provides a sophisticated interface for managing all pending approval requests across projects in a split-view layout. The left panel displays the approval queue as a scrollable list of cards, each showing priority badge (URGENT: filled black, HIGH: bordered, MEDIUM/LOW: hollow), approval type (deployment, merge, release, configuration, access), request title, description, project name, environment, requestor name, and time ago (formatted as '30m ago', '2h ago', etc.). Each card includes 5 quality check badges (Security, Tests, Coverage, Performance, Code Quality) with status indicators (✓ PASS: filled, ⚠ WARN: bordered, ✕ FAIL: strikethrough). The right panel shows detailed information for the selected approval including expandable quality gate checks with threshold values and details, file changes list with type indicators (ADDED, MODIFIED, DELETED), request metadata, and approval action buttons (Approve, Reject with reason, Hold). Header statistics show counts for urgent, pending, and approved today. Filters allow sorting by status, priority, and type.",
    "components": [
      "Page header with title 'APPROVAL QUEUE' and 3 statistics cards (Urgent: highlighted, Pending, Approved Today)",
      "Filters bar with 3 dropdowns (Status, Priority, Type) and results counter",
      "Split-view layout: Approval list (left, scrollable) + Approval details (right, 500px fixed)",
      "Approval cards in queue with selectable/selected states",
      "Card header: status icon (○ pending, ■ approved, □ rejected, ▣ on-hold), priority badge, time ago",
      "Priority badges with styling (URGENT: black background, HIGH: bordered, MEDIUM/LOW: normal)",
      "Card body: title (16px semibold), description (14px muted), metadata row (project, env, requestor)",
      "Quality checks row: 5 check badges with status icons and names",
      "Quality check badges (PASS: filled, WARN: bordered, FAIL: strikethrough)",
      "Card actions (visible only for pending): Approve and Reject buttons",
      "Details panel header with 'APPROVAL DETAILS' title and action buttons",
      "Quality gate checks section with expandable rows showing name, value, threshold, details",
      "Quality row styling (PASS: surface background, WARN: bordered, FAIL: fail background)",
      "Changes section listing modified/added/deleted files with syntax highlighting",
      "Change type labels (ADDED: foreground color, MODIFIED: muted, DELETED: strikethrough)",
      "File paths in monospace font",
      "Request information grid (2 columns) showing Type, Priority, Environment, Project, Requested By, Requested At, Build ID",
      "Approve button (primary, green when enabled)",
      "Reject button (outline) opening rejection reason dialog",
      "Hold button (text) for pausing approval process",
      "Reject dialog overlay with textarea for reason input and Cancel/Reject buttons",
      "Empty state message when no approvals match filters",
      "Empty details panel message when no approval selected"
    ],
    "features": [
      "Centralized approval management across all projects",
      "Priority-based queue (URGENT, HIGH, MEDIUM, LOW)",
      "Five approval types (deployment, merge, release, configuration, access)",
      "Comprehensive quality gate checks with pass/warn/fail states",
      "Quality metrics display (Security, Tests, Coverage, Performance, Code Quality)",
      "Threshold-based quality validation",
      "File changes visualization with type indicators",
      "Approval action workflow (Approve, Reject with reason, Hold)",
      "Rejection reason requirement with textarea dialog",
      "Real-time approval status updates",
      "Time ago formatting (minutes, hours, days)",
      "Multi-criteria filtering (status, priority, type)",
      "Selectable approval cards with visual feedback",
      "Split-view for efficient queue processing",
      "Request metadata display (project, environment, requestor, timestamp)",
      "Build ID linking for deployment approvals",
      "Quality check details with failure explanations",
      "Environment-specific approval routing",
      "Requestor information with name display",
      "Approval statistics in header (urgent count highlighted)",
      "Empty state handling for no approvals",
      "Quality check icon indicators (✓, ⚠, ✕)",
      "Responsive card layout with proper truncation"
    ]
  },
  "QUAL-001": {
    "name": "Quality Metrics",
    "purpose": "Comprehensive code quality analysis and reporting dashboard providing detailed insights into code quality, security vulnerabilities, test coverage, and dependency health with AI-powered recommendations.",
    "description": "The quality metrics page provides in-depth code quality analysis through a sophisticated tabbed interface with visual score representations. The dashboard begins with project selection and analysis timestamp display, followed by a prominent overall score section showing a large circular score indicator (82/100 with B+ grade) and four category scores with progress bars: Code Quality (85% - 12 issues), Security (72% - 3 high vulnerabilities), Test Coverage (78% - 9716/12456 lines), and Dependencies (94% - 8 outdated). Five tabs provide detailed analysis: Overview tab displays a 30-day quality trend bar chart, quality criteria checklist (4 items with pass/warn/fail states), and AI recommendations (3 cards with icons); Code Quality tab shows total issues count, duplicate lines, complex functions table with complexity scores, function names, file locations, and line numbers; Security tab presents vulnerability summary (high/medium/low counts), security hotspots cards with type, severity, location, description, and action buttons; Coverage tab displays line and branch coverage with circular progress rings, and a list of low-coverage files with coverage bars; Dependencies tab shows package statistics, license compatibility grid with incompatible licenses highlighted, and SBOM (Software Bill of Materials) generation options.",
    "components": [
      "Page header with title 'QUALITY GATE' and action buttons (Configure Rules, Run Analysis)",
      "Project selector dropdown with last analysis timestamp",
      "Score dashboard grid: Overall score card (160px circle) + 4 category cards",
      "Overall score circle with large score number (32px), grade letter (24px), border thickness indicating grade",
      "Grade styling (A: filled, B: 6px border, C: 4px border, D: 2px border, F: 2px border)",
      "Category score cards (2x2 grid) with name, percentage, progress bar, metadata",
      "Five-tab navigation (Overview, Code Quality, Security, Coverage, Dependencies)",
      "Overview tab: 30-day trend chart with bars, quality criteria grid (2x2), AI recommendations (3 cards)",
      "Trend chart: 6 horizontal grid lines with labels (0-100), 30 vertical bars with hover tooltips",
      "Quality criteria cards showing criterion name, target value, pass/warn/fail status",
      "AI recommendation cards with emoji icons (💡 refactoring, 🔒 security, 🧪 testing), title, description",
      "Code Quality tab: 3 metric cards (Issues, Duplicate Lines, Complex Functions), high complexity functions table",
      "Functions table: 5 columns (Function, Complexity, File, Line, Action), complexity badges (normal/high: >20)",
      "Security tab: 3 vulnerability count cards (High: filled black, Medium: 2px border, Low: normal), security hotspots list",
      "Hotspot cards with type, severity badge, file location (monospace), description, action buttons (View Code, Fix Suggestion)",
      "Coverage tab: 2 coverage metrics with SVG circular progress rings (120px), metric values inside rings, detailed stats below",
      "Uncovered files list with file name (monospace), line count, coverage bar (100px), percentage, Add Tests button",
      "Dependencies tab: 3 stat cards (Total, Outdated: bordered, Vulnerable: filled), license analysis grid (2x2), SBOM section",
      "License items with name, package count, compatibility status (✓ COMPATIBLE / ✕ INCOMPATIBLE)",
      "Incompatible licenses with inverted styling (black background)",
      "SBOM action buttons (Generate SBOM, Download JSON, Download SPDX)"
    ],
    "features": [
      "Real-time quality scoring and grading (A-F scale)",
      "Project-specific quality analysis with historical data",
      "30-day quality trend visualization with bar chart",
      "Code quality metrics (issues, duplication, complexity)",
      "High complexity function identification with thresholds",
      "Security vulnerability scanning (high/medium/low classification)",
      "Security hotspot detection with severity levels",
      "SQL injection, path traversal, weak crypto detection",
      "Line and branch coverage measurement",
      "Uncovered file identification with coverage percentages",
      "Dependency health monitoring (total, outdated, vulnerable)",
      "License compatibility analysis",
      "GPL incompatibility detection and highlighting",
      "SBOM generation in multiple formats (JSON, SPDX)",
      "Quality criteria checklist with threshold validation",
      "AI-powered recommendations for improvement",
      "Function-level complexity analysis",
      "File and line number navigation for issues",
      "Fix suggestions for security vulnerabilities",
      "Test coverage improvement suggestions",
      "Circular progress indicators for visual appeal",
      "Grade-based styling with varying border thickness",
      "Hover tooltips on trend chart bars"
    ]
  },
  "SETT-001": {
    "name": "System Settings",
    "purpose": "Comprehensive platform-wide settings management for user profile, security, notifications, preferences, integrations, and data privacy with granular control over all system configurations.",
    "description": "The settings page provides extensive configuration options across six major categories through a sophisticated sidebar navigation with tabbed content areas. Each tab contains detailed forms and controls for specific configuration areas including user profile management, security settings, notification preferences, UI customization, external service integrations, and data privacy controls.",
    "components": [
      "Page header with title 'SETTINGS', subtitle, unsaved changes indicator (● UNSAVED CHANGES), Save Changes button",
      "Sidebar navigation (250px fixed) with 6 tab buttons (Profile, Security, Notifications, Preferences, Integrations, Data)",
      "Tab buttons with ASCII icons (▣ profile, ◈ security, ◉ notifications, ◧ preferences, ◊ integrations, ◩ data)",
      "Active tab indicator (filled black background, left border)",
      "Tab content area with section-specific forms",
      "Form dirty state tracking indicator",
      "Confirmation dialogs for destructive actions"
    ],
    "features": [
      "Six-category settings management",
      "Sidebar navigation with active state",
      "Form validation with real-time feedback",
      "Dirty state tracking",
      "Unsaved changes warning",
      "Responsive design with collapsible sidebar on mobile"
    ],
    "tabs": {
      "Profile": {
        "description": "The Profile tab manages user information including username (unique identifier), email address, full name, department, role (read-only, assigned by admin), phone number, location, join date (read-only), and bio (max 500 characters). The form uses a 2-column grid layout with full-width bio field at the bottom.",
        "components": [
          "8 input fields in 2-column grid",
          "Username input (unique, 3-20 chars, alphanumeric + underscore)",
          "Email input (with validation)",
          "Full name input",
          "Department input",
          "Role display (read-only with badge)",
          "Phone number input (with format validation)",
          "Location input",
          "Join date display (read-only, formatted)",
          "Bio textarea (full width, max 500 chars)",
          "Character counter for bio",
          "Save button at bottom"
        ],
        "features": [
          "User profile editing",
          "Username uniqueness validation",
          "Email format validation",
          "Phone number format validation",
          "Bio character counter",
          "Read-only fields for role and join date",
          "2-column responsive grid",
          "Form validation with inline errors",
          "Unsaved changes detection"
        ]
      },
      "Security": {
        "description": "The Security tab handles password changes, two-factor authentication, API key management, and active session monitoring. Password section shows last changed date and includes a collapsible form for changing password. Two-factor authentication can be enabled/disabled with method selection (TOTP/SMS/App). API keys section allows generating new keys with custom permissions and expiration dates, displaying existing keys with masked values, and revoking keys. Active sessions section lists all current sessions with device, location, IP, browser info and allows terminating individual sessions.",
        "components": [
          "Password section: last changed date, Change Password button, collapsible form (current, new, confirm)",
          "Password strength indicator",
          "Two-Factor Auth section: status toggle, method display, Enable/Disable button",
          "2FA setup wizard with QR code for TOTP",
          "API Keys section: New Key button, keys list, Revoke buttons",
          "API key generation form: name input, permissions checkboxes (6 scopes), expiration date",
          "API key cards: name, masked key (first 10 + last 4), created/expires dates, Revoke button",
          "Copy key to clipboard button",
          "Active Sessions section: sessions list, End Session buttons",
          "Session cards: device, location, IP, browser, last active, current badge"
        ],
        "features": [
          "Password change with strength validation",
          "Current password verification",
          "Two-factor authentication setup",
          "TOTP/SMS/App method selection",
          "QR code generation for TOTP",
          "Backup codes generation",
          "API key creation with custom permissions",
          "API key expiration dates",
          "API key masking for security",
          "API key copy to clipboard",
          "API key revocation",
          "Active session monitoring",
          "Session device and location tracking",
          "Individual session termination",
          "Current session protection"
        ]
      },
      "Notifications": {
        "description": "The Notifications tab configures multi-channel notification preferences including Email, Slack, In-app, and SMS channels. Each channel can be enabled/disabled and configured with event-specific subscriptions. Users can select which events trigger notifications (builds, deployments, approvals, issues, mentions) per channel. A Do Not Disturb feature allows scheduling quiet periods with start and end times.",
        "components": [
          "4 channel sections (Email, Slack, In-app, SMS)",
          "Channel enable toggle for each",
          "Event subscription grid (2 columns) per channel",
          "Event checkboxes: Builds (started/completed/failed), Deployments (started/completed/failed), Approvals (requested/approved/rejected), Issues (opened/assigned/closed), Mentions",
          "Do Not Disturb section",
          "DND enable toggle",
          "Start time input (HH:MM)",
          "End time input (HH:MM)",
          "Timezone display",
          "Test notification button per channel"
        ],
        "features": [
          "Multi-channel notifications",
          "Per-channel enable/disable",
          "Granular event selection",
          "Build notifications (started/completed/failed)",
          "Deployment notifications",
          "Approval workflow notifications",
          "Issue tracking notifications",
          "Mention notifications",
          "Do Not Disturb scheduling",
          "Timezone-aware DND",
          "Test notification functionality",
          "Channel-specific event subscriptions"
        ]
      },
      "Preferences": {
        "description": "The Preferences tab customizes UI and regional settings including theme selection (Dark/Light/System), language (EN/KO/JA/ZH), timezone (major cities), date format (YYYY-MM-DD/DD-MM-YYYY/MM-DD-YYYY), time format (12h/24h), first day of week, number format, and default landing page view. All settings have immediate preview.",
        "components": [
          "Theme dropdown (Dark/Light/System)",
          "Language dropdown (4 languages)",
          "Timezone dropdown (50+ major cities)",
          "Date format dropdown (3 formats with examples)",
          "Time format dropdown (12h/24h with examples)",
          "First day of week dropdown (Sunday/Monday)",
          "Number format dropdown (1,234.56 / 1.234,56 / 1 234,56)",
          "Default view dropdown (Dashboard/Projects/Builds/Timeline)",
          "Preview section showing current selections"
        ],
        "features": [
          "Theme selection (dark/light/system)",
          "Multi-language support",
          "Timezone configuration",
          "Date format customization",
          "Time format selection",
          "First day of week preference",
          "Number format localization",
          "Default landing page",
          "Real-time preview",
          "Format examples display"
        ]
      },
      "Integrations": {
        "description": "The Integrations tab manages connections to external services including GitHub, GitLab, Jenkins, Slack, and SonarQube. Each integration card shows connection status, configured values, and Connect/Disconnect buttons. Configuration panels allow entering credentials, URLs, and testing connections. Integration status is tracked and displayed with visual indicators.",
        "components": [
          "5 integration cards in 2-column grid",
          "Integration cards: name, status (● CONNECTED / ○ DISCONNECTED), info display, action buttons",
          "GitHub integration: organization, repositories count, Connect/Disconnect",
          "GitLab integration: instance URL, groups count, Connect/Disconnect",
          "Jenkins integration: server URL, jobs count, Connect/Disconnect",
          "Slack integration: workspace name, channel, Connect/Disconnect",
          "SonarQube integration: server URL, projects count, Connect/Disconnect",
          "Connection configuration modals",
          "OAuth authentication flows",
          "Test connection buttons"
        ],
        "features": [
          "External service integrations",
          "OAuth authentication support",
          "Connection status tracking",
          "GitHub integration (repos, webhooks)",
          "GitLab integration (projects, pipelines)",
          "Jenkins integration (jobs, builds)",
          "Slack integration (notifications, commands)",
          "SonarQube integration (quality metrics)",
          "Connection testing",
          "Credential management",
          "Disconnect with confirmation"
        ]
      },
      "Data & Privacy": {
        "description": "The Data & Privacy tab manages data retention policies, data export requests, and privacy settings. Users can configure retention periods for different data types (builds, logs, artifacts, analytics), request data exports in various formats (JSON/CSV/XML), view export history, and manage GDPR settings. A Danger Zone section allows account deletion with confirmation.",
        "components": [
          "Data Retention section: 4 number inputs (days) for builds, logs, artifacts, analytics",
          "Data Export section: Request Export button, format selection dialog, export history table",
          "Export history table: Format, Requested At, Status, Download button",
          "Privacy Settings section: 3 checkboxes (data processing agreement, marketing emails, analytics tracking)",
          "GDPR section: data subject rights information, request data access button",
          "Danger Zone: dashed red border, Delete Account button",
          "Delete confirmation dialog: warning text, type 'DELETE MY ACCOUNT' input, final Delete button"
        ],
        "features": [
          "Data retention policy configuration",
          "Per-type retention periods",
          "Data export requests",
          "Multi-format exports (JSON/CSV/XML)",
          "Export history tracking",
          "Export download links",
          "GDPR compliance settings",
          "Data processing agreement",
          "Marketing email opt-in/out",
          "Analytics tracking control",
          "Data subject access requests",
          "Account deletion",
          "Typed confirmation for deletion",
          "Permanent deletion warning"
        ]
      }
    }
  }
}
